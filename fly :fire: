local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

local flying = false
local speed = 50
local connection

UIS.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.Q then
		flying = not flying
		if flying then
			connection = RunService.RenderStepped:Connect(function(dt)
				local moveDir = Vector3.zero
				if UIS:IsKeyDown(Enum.KeyCode.W) then
					moveDir += workspace.CurrentCamera.CFrame.LookVector
				end
				if UIS:IsKeyDown(Enum.KeyCode.S) then
					moveDir -= workspace.CurrentCamera.CFrame.LookVector
				end
				if UIS:IsKeyDown(Enum.KeyCode.A) then
					moveDir -= workspace.CurrentCamera.CFrame.RightVector
				end
				if UIS:IsKeyDown(Enum.KeyCode.D) then
					moveDir += workspace.CurrentCamera.CFrame.RightVector
				end
				if UIS:IsKeyDown(Enum.KeyCode.Space) then
					moveDir += workspace.CurrentCamera.CFrame.UpVector
				end
				if UIS:IsKeyDown(Enum.KeyCode.LeftControl) then
					moveDir -= workspace.CurrentCamera.CFrame.UpVector
				end

				if moveDir.Magnitude > 0 then
					root.CFrame = root.CFrame + (moveDir.Unit * speed * dt)
				end

				for _, part in ipairs(character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end)
		else
			if connection then
				connection:Disconnect()
				connection = nil
			end
		end
	end
end)
